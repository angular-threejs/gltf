#!/usr/bin/env node
"use strict";

import meow from "meow";
import { dirname } from "node:path";
import { readPackageUpSync } from "read-pkg-up";
import { fileURLToPath } from "node:url";
import gltf from "./src/index.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const cli = meow(
  `
  Usage
    $ npx angular-three-gltf@latest [Model.glb] [options]

  Options
    --output, -o        Output file name/path
    --selector          Selector for the component
    --name, -n          Name of the component
    --keepnames, -k     Keep original names
    --keepgroups, -K    Keep (empty) groups, disable pruning
    --meta, -m          Include metadata (as userData)
    --shadows, -s       Let meshes cast and receive shadows
    --printwidth, -w    Prettier printWidth (default: 120)
    --precision, -p     Number of fractional digits (default: 2)
    --draco, -d         Draco binary path
    --preload -P        Add preload method to module script
    --root, -r          Sets directory from which .gltf file is served
    --transform, -T     Transform the asset for the web (draco, prune, resize)
      --resolution, -R  Transform resolution for texture resizing (default: 1024)
      --simplify, -S    Transform simplification (default: false) (experimental!)
        --weld          Weld tolerance (default: 0.0001)
        --ratio         Simplifier ratio (default: 0.75)
        --error         Simplifier error threshold (default: 0.001)
    --debug, -D         Debug output
`,
  {
    importMeta: import.meta,
    flags: {
      output: { type: "string", shortFlag: "o" },
      selector: { type: "string" },
      name: { type: "string" },
      types: { type: "boolean", shortFlag: "t" },
      keepnames: { type: "boolean", shortFlag: "k" },
      keepgroups: { type: "boolean", shortFlag: "K" },
      shadows: { type: "boolean", shortFlag: "s" },
      printwidth: { type: "number", shortFlag: "p", default: 120 },
      meta: { type: "boolean", shortFlag: "m" },
      precision: { type: "number", shortFlag: "p", default: 2 },
      isolated: { type: "boolean", shortFlag: "i", default: false },
      preload: { type: "boolean", shortFlag: "P", default: false },
      draco: { type: "string", shortFlag: "d" },
      root: { type: "string", shortFlag: "r" },
      transform: { type: "boolean", shortFlag: "T" },
      resolution: { type: "number", shortFlag: "R", default: 1024 },
      simplify: { type: "boolean", shortFlag: "S", default: false },
      weld: { type: "number", default: 0.0001 },
      ratio: { type: "number", default: 0.75 },
      error: { type: "number", default: 0.001 },
      debug: { type: "boolean", shortFlag: "D" },
    },
  },
);

const { packageJson } = readPackageUpSync({ cwd: __dirname });

if (cli.input.length === 0) {
  console.log(cli.help);
} else {
  const file = cli.input[0];
  let nameExt = file.match(/[-_\w]+[.]\w+$/i)[0];
  let name = nameExt.split(".").slice(0, -1).join(".");
  let output = name + ".ts";

  if (cli.flags.output) {
    if (cli.flags.output.endsWith(".ts")) {
      output = cli.flags.output;
    } else {
      output = `${cli.output.flags}/${output}`;
    }
  }

  const showLog = (log) => {
    console.info("log:", log);
  };

  const config = {
    ...cli.flags,
    showLog,
    timeout: 0,
    delay: 1,
    header: `Auto-generated by: https://github.com/angular-threejs/gltf
Command: npx angular-three-gltf&#64;${packageJson.version} ${process.argv.slice(2).join(" ")}`,
  };

  try {
    await gltf(file, output, config);
  } catch (e) {
    console.error(e);
  }
}
