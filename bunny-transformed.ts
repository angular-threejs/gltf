
    <!--
Auto-generated by: https://github.com/angular-threejs/gltf
Command: npx @angular-three-gltf@1.0.0 examples/bunny-transformed.glb
-->


	    import type * as THREE from 'three'
        import { Group } from 'three'
        import { NgtGroup, NgtObjectEventsHostDirective } from 'angular-three';
        import { Component, ChangeDetectionStrategy, CUSTOM_ELEMENTS_SCHEMA, Signal, input, computed, viewChild, ElementRef, effect } from '@angular/core';
        import { injectGLTF } from 'angular-three-soba/loaders';
        
	



printTypes(objects, animations)

@Component({
    selector: 'app-model',
    template: `
      @if (gltf();as gltf) {
        <ngtmesh [geometry]="gltf.nodes.bunny.geometry" [material]="gltf.materials['Default OBJ']" />

      }
    `,
    hostDirectives: [NgtObjectEventsHostDirective],
    schemas: [CUSTOM_ELEMENTS_SCHEMA],
    changeDetection: ChangeDetectionStrategy.OnPush
})
export class Model {
    options = input({} as Partial<NgtGroup>);
    
    
    modelRef = viewChild<ElementRef<Group>>('model');

    protected gltf = injectGLTF(() => "/examples/bunny-transformed.glb") as Signal<GLTFResult | null>;
    private scene = computed(() => {
        const gltf = this.gltf();
        if (!gltf) return null;
        return gltf.scene;
    });
    
    private objectEvents = inject(NgtObjectEventsHostDirective, { host: true });
    
    constructor() {
        
        
        effect(() => {
            const modelRef = this.modelRef()?.nativeElement;
            if (!modelRef) return;
            
            this.objectEvents.ngtObjectEvents.set(modelRef);
        }, { allowSignalWrites: true });
    }
}
	